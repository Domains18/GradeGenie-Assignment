import {
    Document,
    Packer,
    Paragraph,
    TextRun,
    HeadingLevel,
    AlignmentType,
    Table,
    TableRow,
    TableCell,
    BorderStyle,
    WidthType,
    TableBorders,
    ShadingType,
    Header,
    Footer,
} from 'docx';
import { ReportContent } from './report-utils';

/**
 * Generates a professionally styled DOCX report
 */
export async function generateDocxReport(content: ReportContent): Promise<Buffer> {
    // Colors (hex codes)
    const primaryColor = '0B667E'; // Dark blue
    const secondaryColor = 'CCd9e6'; // Light blue/gray
    const accentColor = '338066'; // Green for good scores

    // Calculate total score
    const totalScore = content.scores.reduce((sum, item) => sum + item.score, 0);
    const totalMaxScore = content.scores.reduce((sum, item) => sum + item.maxScore, 0);
    const totalPercentage = (totalScore / totalMaxScore) * 100;

    // Create header with logo and title
    const header = new Header({
        children: [
            new Paragraph({
                alignment: AlignmentType.LEFT,
                spacing: {
                    after: 200,
                },
                children: [
                    new TextRun({
                        text: 'GRADE GENIE',
                        bold: true,
                        size: 36,
                        color: primaryColor,
                    }),
                    new TextRun({
                        text: ' | ASSESSMENT REPORT',
                        size: 24,
                        color: primaryColor,
                        break: 1,
                    }),
                ],
            }),
        ],
    });

    // Create footer
    const footer = new Footer({
        children: [
            new Paragraph({
                alignment: AlignmentType.LEFT,
                border: {
                    top: {
                        color: primaryColor,
                        style: BorderStyle.SINGLE,
                        size: 1,
                    },
                },
                children: [
                    new TextRun({
                        text: 'Generated by Grade Genie Assessment System',
                        size: 16,
                    }),
                    new TextRun({
                        text: `Report generated on ${new Date().toLocaleDateString()}`,
                        size: 16,
                        break: 1,
                    }),
                ],
            }),
        ],
    });

    // Student info table
    const studentInfoTable = new Table({
        width: {
            size: 100,
            type: WidthType.PERCENTAGE,
        },
        borders: {
            top: { style: BorderStyle.NONE },
            bottom: { style: BorderStyle.NONE },
            left: { style: BorderStyle.NONE },
            right: { style: BorderStyle.NONE },
            insideHorizontal: { style: BorderStyle.NONE },
            insideVertical: { style: BorderStyle.NONE },
        },
        rows: [
            new TableRow({
                children: [
                    new TableCell({
                        width: {
                            size: 25,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: 'Student:',
                                        bold: true,
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        width: {
                            size: 75,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: content.studentName,
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                ],
            }),
            new TableRow({
                children: [
                    new TableCell({
                        width: {
                            size: 25,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: 'Assignment:',
                                        bold: true,
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        width: {
                            size: 75,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: content.submission || 'Assessment',
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                ],
            }),
            new TableRow({
                children: [
                    new TableCell({
                        width: {
                            size: 25,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: 'Course:',
                                        bold: true,
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        width: {
                            size: 75,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: content.submission || 'Not specified',
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                ],
            }),
            new TableRow({
                children: [
                    new TableCell({
                        width: {
                            size: 25,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: 'Date:',
                                        bold: true,
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        width: {
                            size: 75,
                            type: WidthType.PERCENTAGE,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: content.submission
                                            ? new Date(new Date).toLocaleDateString()
                                            : new Date().toLocaleDateString(),
                                        size: 24,
                                    }),
                                ],
                            }),
                        ],
                    }),
                ],
            }),
        ],
    });

    // Scores section heading
    const scoresHeading = new Paragraph({
        heading: HeadingLevel.HEADING_2,
        thematicBreak: true,
        spacing: {
            before: 400,
            after: 200,
        },
        children: [
            new TextRun({
                text: 'Assessment Scores',
                bold: true,
                size: 28,
                color: primaryColor,
            }),
        ],
    });

    // Create scores table
    const scoreTableRows = [
        // Header Row
        new TableRow({
            tableHeader: true,
            height: {
                value: 400,
                rule: "atLeast",
            },
            children: [
                new TableCell({
                    width: {
                        size: 50,
                        type: WidthType.PERCENTAGE,
                    },
                    shading: {
                        fill: primaryColor,
                        type: ShadingType.CLEAR,
                    },
                    children: [
                        new Paragraph({
                            alignment: AlignmentType.LEFT,
                            children: [
                                new TextRun({
                                    text: 'Criteria',
                                    bold: true,
                                    color: 'FFFFFF',
                                    size: 24,
                                }),
                            ],
                        }),
                    ],
                }),
                new TableCell({
                    width: {
                        size: 15,
                        type: WidthType.PERCENTAGE,
                    },
                    shading: {
                        fill: primaryColor,
                        type: ShadingType.CLEAR,
                    },
                    children: [
                        new Paragraph({
                            alignment: AlignmentType.CENTER,
                            children: [
                                new TextRun({
                                    text: 'Score',
                                    bold: true,
                                    color: 'FFFFFF',
                                    size: 24,
                                }),
                            ],
                        }),
                    ],
                }),
                new TableCell({
                    width: {
                        size: 35,
                        type: WidthType.PERCENTAGE,
                    },
                    shading: {
                        fill: primaryColor,
                        type: ShadingType.CLEAR,
                    },
                    children: [
                        new Paragraph({
                            alignment: AlignmentType.LEFT,
                            children: [
                                new TextRun({
                                    text: 'Comments',
                                    bold: true,
                                    color: 'FFFFFF',
                                    size: 24,
                                }),
                            ],
                        }),
                    ],
                }),
            ],
        }),
    ];

    // Add score rows
    let oddRow = true;
    for (const item of content.scores) {
        const percentage = (item.score / item.maxScore) * 100;
        const scoreColor = getScoreColorHex(percentage);

        scoreTableRows.push(
            new TableRow({
                height: {
                    value: 500,
                    rule: "atLeast",
                },
                children: [
                    new TableCell({
                        shading: {
                            fill: oddRow ? 'F5F5F5' : 'FFFFFF',
                            type: ShadingType.CLEAR,
                        },
                        children: [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: item.criteriaName,
                                        bold: true,
                                        size: 22,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        shading: {
                            fill: oddRow ? 'F5F5F5' : 'FFFFFF',
                            type: ShadingType.CLEAR,
                        },
                        children: [
                            new Paragraph({
                                alignment: AlignmentType.CENTER,
                                children: [
                                    new TextRun({
                                        text: `${item.score}/${item.maxScore}`,
                                        bold: true,
                                        color: scoreColor,
                                        size: 22,
                                    }),
                                    new TextRun({
                                        text: ` (${percentage.toFixed(1)}%)`,
                                        bold: true,
                                        color: scoreColor,
                                        size: 20,
                                    }),
                                ],
                            }),
                        ],
                    }),
                    new TableCell({
                        shading: {
                            fill: oddRow ? 'F5F5F5' : 'FFFFFF',
                            type: ShadingType.CLEAR,
                        },
                        children: [
                            new Paragraph({
                                alignment: AlignmentType.LEFT,
                                children: [
                                    new TextRun({
                                        text: item.comments || 'No comments provided',
                                        italics: true,
                                        size: 20,
                                    }),
                                ],
                            }),
                        ],
                    }),
                ],
            }),
        );

        oddRow = !oddRow;
    }

    // Add total score row
    scoreTableRows.push(
        new TableRow({
            height: {
                value: 500,
                rule: "atLeast",
            },
            children: [
                new TableCell({
                    shading: {
                        fill: primaryColor,
                        type: ShadingType.CLEAR,
                    },
                    children: [
                        new Paragraph({
                            alignment: AlignmentType.LEFT,
                            children: [
                                new TextRun({
                                    text: 'TOTAL SCORE',
                                    bold: true,
                                    color: 'FFFFFF',
                                    size: 24,
                                }),
                            ],
                        }),
                    ],
                }),
                new TableCell({
                    columnSpan: 2,
                    shading: {
                        fill: primaryColor,
                        type: ShadingType.CLEAR,
                    },
                    children: [
                        new Paragraph({
                            alignment: AlignmentType.CENTER,
                            children: [
                                new TextRun({
                                    text: `${totalScore}/${totalMaxScore} (${totalPercentage.toFixed(1)}%)`,
                                    bold: true,
                                    color: 'FFFFFF',
                                    size: 24,
                                }),
                            ],
                        }),
                    ],
                }),
            ],
        }),
    );

    const scoresTable = new Table({
        width: {
            size: 100,
            type: WidthType.PERCENTAGE,
        },
        borders: {
            top: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
            bottom: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
            left: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
            right: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
            insideHorizontal: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
            insideVertical: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
        },
        rows: scoreTableRows,
    });

    const feedbackSection = content.feedback
        ? [
              new Paragraph({
                  heading: HeadingLevel.HEADING_2,
                  thematicBreak: true,
                  spacing: {
                      before: 400,
                      after: 200,
                  },
                  children: [
                      new TextRun({
                          text: 'Overall Feedback',
                          bold: true,
                          size: 28,
                          color: primaryColor,
                      }),
                  ],
              }),
              new Table({
                  width: {
                      size: 100,
                      type: WidthType.PERCENTAGE,
                  },
                  borders: {
                      top: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
                      bottom: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
                      left: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
                      right: { style: BorderStyle.SINGLE, size: 1, color: primaryColor },
                  },
                  rows: [
                      new TableRow({
                          children: [
                              new TableCell({
                                  shading: {
                                      fill: 'F9F9F9',
                                      type: ShadingType.CLEAR,
                                  },
                                  children: [
                                      new Paragraph({
                                          children: [
                                              new TextRun({
                                                  text: content.feedback,
                                                  size: 22,
                                              }),
                                          ],
                                      }),
                                  ],
                              }),
                          ],
                      }),
                  ],
              }),
          ]
        : [];

    // Create the document
    const doc = new Document({
        sections: [
            {
                properties: {},
                headers: {
                    default: header,
                },
                footers: {
                    default: footer,
                },
                children: [
                    // Student info table
                    studentInfoTable,
                    // Scores section
                    scoresHeading,
                    scoresTable,
                    // Feedback section (if available)
                    ...feedbackSection,
                ],
            },
        ],
    });

    return Packer.toBuffer(doc);
}
function getScoreColorHex(percentage: number): string {
    if (percentage >= 90) return '338066'; // Green for excellent
    if (percentage >= 75) return '1A80B3'; // Blue for good
    if (percentage >= 60) return 'E59A1A'; // Orange for satisfactory
    return 'CC3333'; // Red for needs improvement
}
